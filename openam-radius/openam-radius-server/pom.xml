<?xml version="1.0" encoding="UTF-8"?>
<!--
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions copyright [year] [name of copyright owner]".
 *
 * Copyright 2015-2016 ForgeRock AS.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.forgerock.openam</groupId>
    <artifactId>openam-radius</artifactId>
    <version>14.1.5-SNAPSHOT</version>
  </parent>
  <artifactId>openam-radius-server</artifactId>
  <name>OpenAM RADIUS Server</name>
  <description>Provides a RADIUS server that runs as a service inside OpenAM and uses OpenAM 
  auth chains to resolve authN requests.</description>
  
  <dependencies>
      <dependency>
      	<groupId>${project.groupId}</groupId>
      	<artifactId>openam-radius-common</artifactId>
      	<version>${project.version}</version>
      </dependency>
      <dependency>
      	<groupId>${project.groupId}</groupId>
      	<artifactId>openam-core</artifactId>
      </dependency>
       <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
           <scope>provided</scope>
       </dependency>
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava</artifactId>
		</dependency>
  </dependencies>

    <!-- Build -->
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>./</classpathPrefix>
                            <mainClass>org.forgerock.openam.radius.server.ConsoleClient</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
              <plugin>
                 <!--  Enforce Checkstyle during compilation

                 Strictly speaking Checkstyle should be invoked as a
                      report during site generation. However, we want
                      to fail the build if source code does not comply with
                      our coding guidelines, and not at a later stage when
                      the site is generated (which may never occur for some
                      projects). -->
                
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-checkstyle-plugin</artifactId>
                 <executions>
                     <execution>
                         <id>check-src-and-tests</id>
                         <configuration>
                             <configLocation>${checkstyleSourceConfigLocation}</configLocation>
                             <headerLocation>${checkstyleHeaderLocation}</headerLocation>
                             <suppressionsLocation>${checkstyleUnitTestSuppressionsLocation}</suppressionsLocation>
                             <includeTestSourceDirectory>false</includeTestSourceDirectory>
                             <!--  Only output errors if we're not expecting any -->
                             <consoleOutput>${checkstyleFailOnError}</consoleOutput>
                             <failsOnError>${checkstyleFailOnError}</failsOnError>
                             <excludes>**/resources/**/*</excludes>
                         </configuration>
                         <phase>process-test-classes</phase>
                         <goals>
                             <goal>checkstyle</goal>
                         </goals>
                     </execution>
                 </executions>
             </plugin>         
        </plugins>
    </build>
</project>

