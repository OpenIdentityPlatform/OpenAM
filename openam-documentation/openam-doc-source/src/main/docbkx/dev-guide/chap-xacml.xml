<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2013 ForgeRock AS
  !    
-->
<chapter xml:id='chap-xacml'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Requesting a XACML Policy Decision Using OpenAM Java SDK</title>

 <para>This chapter shows how to request a XACML policy decision with OpenAM
 Java SDK, using the sample client,
 <filename>source/samples/xacml/XACMLClientSample.java</filename>.
 The sample client relies on an OpenAM server acting as a policy decision point
 and another OpenAM server acting as a policy enforcement point.</para>
 
 <para>The sample client uses the XACML <literal>ContextFactory</literal> to
 create the XACML request. It then uses the
 <literal>XACMLRequestProcessor</literal> to get a decision as XACML
 <literal>Response</literal> from OpenAM. Most of the work in the sample
 is done setting up the request.</para>
 
 <para>The implementation of the <literal>XACMLClientSample</literal> class
 follows.</para>

 <programlisting language="java">package samples.xacml;

import com.sun.identity.saml2.common.SAML2Exception;

import com.sun.identity.xacml.client.XACMLRequestProcessor;
import com.sun.identity.xacml.common.XACMLConstants;
import com.sun.identity.xacml.common.XACMLException;
import com.sun.identity.xacml.context.ContextFactory;
import com.sun.identity.xacml.context.Action;
import com.sun.identity.xacml.context.Attribute;
import com.sun.identity.xacml.context.Environment;
import com.sun.identity.xacml.context.Request;
import com.sun.identity.xacml.context.Resource;
import com.sun.identity.xacml.context.Response;
import com.sun.identity.xacml.context.Subject;

import java.net.URI;
import java.net.URISyntaxException;

import java.io.PrintWriter;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;

public class XACMLClientSample {


    public XACMLClientSample() {
    }

    public static void main(String[] args) throws Exception {
        XACMLClientSample clientSample = new XACMLClientSample();
        clientSample.runSample(args);
        System.exit(0);
    }

    public void runSample(String[] args) throws Exception {
        if (args.length == 0 || args.length &gt; 1) {
            System.out.println("Missing argument:"
                    + "properties file name not specified");
        } else {
            System.out.println("Using properties file:" + args[0]);
            Properties sampleProperties = getProperties(args[0]);
            testProcessRequest(
                (String)sampleProperties.get("pdp.entityId"),
                (String)sampleProperties.get("pep.entityId"),
                (String)sampleProperties.get("subject.id"),
                (String)sampleProperties.get("subject.id.datatype"),
                (String)sampleProperties.get("subject.category"),
                (String)sampleProperties.get("resource.id"),
                (String)sampleProperties.get("resource.id.datatype"),
                (String)sampleProperties.get("resource.servicename"),
                (String)sampleProperties.get("resource.servicename.datatype"),
                (String)sampleProperties.get("action.id"),
                (String)sampleProperties.get("action.id.datatype")
            );
        }
    }

    private void testProcessRequest(
            String pdpEntityId, String pepEntityId,
            String subjectId, String subjectIdType,
            String subjectCategory,
            String resourceId, String resourceIdType,
            String serviceName, String serviceNameType,
            String actionId, String actionIdType) 
            throws XACMLException, SAML2Exception, 
            URISyntaxException, Exception {

        Request xacmlRequest = createSampleXacmlRequest(
            subjectId, subjectIdType,
            subjectCategory,
            resourceId, resourceIdType,
            serviceName, serviceNameType,
            actionId, actionIdType); 

        System.out.println("\ntestProcessRequest():xacmlRequest:\n" 
                + xacmlRequest.toXMLString(true, true));

        Response xacmlResponse = XACMLRequestProcessor.getInstance()
                .processRequest(xacmlRequest, pdpEntityId, pepEntityId);

        System.out.println("testProcessRequest():xacmlResponse:\n"
                + xacmlResponse.toXMLString(true, true));
    }

    private Request createSampleXacmlRequest(
            String subjectId, String subjectIdType,
            String subjectCategory,
            String resourceId, String resourceIdType,
            String serviceName, String serviceNameType,
            String actionId, String actionIdType) 
            throws XACMLException, URISyntaxException {

        Request request = ContextFactory.getInstance().createRequest();

        //Subject
        Subject subject = ContextFactory.getInstance().createSubject();
        subject.setSubjectCategory(new URI(subjectCategory));

        //set subject id
        Attribute attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.SUBJECT_ID));
        attribute.setDataType(new URI(subjectIdType));
        List valueList = new ArrayList();
        valueList.add(subjectId); 
        attribute.setAttributeStringValues(valueList);
        List attributeList = new ArrayList();
        attributeList.add(attribute);
        subject.setAttributes(attributeList);


        //set Subject in Request
        List subjectList = new ArrayList();
        subjectList.add(subject);
        request.setSubjects(subjectList);

        //Resource
        Resource resource = ContextFactory.getInstance().createResource();

        //set resource id
        attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.RESOURCE_ID));
        attribute.setDataType( new URI(resourceIdType));
        valueList = new ArrayList();
        valueList.add(resourceId);
        attribute.setAttributeStringValues(valueList);
        attributeList = new ArrayList();
        attributeList.add(attribute);

        //set serviceName
        attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.TARGET_SERVICE));
        attribute.setDataType(new URI(serviceNameType));
        valueList = new ArrayList();
        valueList.add(serviceName);
        attribute.setAttributeStringValues(valueList);
        attributeList.add(attribute);
        resource.setAttributes(attributeList);

        //set Resource in Request
        List resourceList = new ArrayList();
        resourceList.add(resource);
        request.setResources(resourceList);

        //Action
        Action action = ContextFactory.getInstance().createAction();
        attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.ACTION_ID));
        attribute.setDataType(new URI(actionIdType));

        //set actionId
        valueList = new ArrayList();
        valueList.add(actionId);
        attribute.setAttributeStringValues(valueList);
        attributeList = new ArrayList();
        attributeList.add(attribute);
        action.setAttributes(attributeList);

        //set Action in Request
        request.setAction(action);

        //Environment, our PDP does not use environment now
        Environment environment = ContextFactory.getInstance()
            .createEnvironment();
        request.setEnvironment(environment);
        return request;
    }

    private Properties getProperties(String file)
        throws MissingResourceException {
        Properties properties = new Properties();
        ResourceBundle bundle = ResourceBundle.getBundle(file);
        Enumeration e = bundle.getKeys();
        System.out.println("sample properties:");
        while (e.hasMoreElements()) {
            String key = (String) e.nextElement();
            String value = bundle.getString(key);
            properties.put(key, value);
            System.out.println(key + ":" + value);
        }
        return properties;
    }
}</programlisting>

 <para>Before running the sample client, you must set up the configuration as
 described in the comments at the outset of the
 <filename>scripts/run-xacml-client-sample.sh</filename> script.</para>

 <itemizedlist>
  <listitem>
   <para>Edit <filename>resources/xacmlClientSample.properties</filename>
   and <filename>resources/policyEvaluationSample.properties</filename>
   to set up the configuration for the sample client.</para>

   <para>The relevant settings from
   <filename>resources/xacmlClientSample.properties</filename> are the
   following.</para>

   <programlisting language="ini">pdp.entityId=xacmlPdpEntity
pep.entityId=xacmlPepEntity
subject.id=id=demo,ou=user,<?eval ${defaultRootSuffix}?>
subject.id.datatype=urn:oasis:names:tc:xacml:1.0:data-type:x500Name
subject.category=urn:oasis:names:tc:xacml:1.0:subject-category:access-subject
resource.id=http://www.example.com:80/banner.html
resource.id.datatype=http://www.w3.org/2001/XMLSchema#string
resource.servicename=iPlanetAMWebAgentService
resource.servicename.datatype=http://www.w3.org/2001/XMLSchema#string
action.id=GET
action.id.datatype=http://www.w3.org/2001/XMLSchema#string</programlisting>

   <para>The relevant settings from
   <filename>resources/policyEvaluationSample.properties</filename> are the
   following.</para>

   <programlisting language="ini">user.name=demo
user.password=changeit
service.name=iPlanetAMWebAgentService
resource.name=http://www.example.com:80/banner.html
action.name=GET</programlisting>
  </listitem>

  <listitem>
   <para>The client accesses an OpenAM server acting as the policy enforcement
    point, configured in a circle of trust with the OpenAM server acting as the
    policy decision point. When you set up the sample clients, you pointed them
    to an OpenAM server. For this example, configure that server to function
    as a policy enforcement point and also as a policy decision point.</para>

    <orderedlist>
     <listitem>
      <para>In OpenAM console, browse to Configuration &gt; Global &gt; SAMLv2
      SOAP Binding, and configure a new request handler with Key
      <literal>/xacmlPdpEntity</literal> and Class
      <literal>com.sun.identity.xacml.plugins.XACMLAuthzDecisionQueryHandler</literal>.</para>
     </listitem>

     <listitem>
      <para>Set up the circle of trust, and then create and import the metadata
      for the policy enforcement point and the policy decision point. In the
      following simplified example, both the policy enforcement point and policy
      decision point are hosted on the same OpenAM server. You could also set
      up the policy enforcement point and policy decision point on separate
      servers, as long as the circles of trust on both servers each include both
      the policy enforcement point and the policy decision point. You can
      set up the trust relationship between the two entities either by using
      the <command>ssoadm</command> command as shown below, or by using the
      <literal>ssoadm.jsp</literal> page, which you can activate as described in
      <link xlink:href="admin-guide#openam-ssoadm-jsp-overview" xlink:show="new"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>OpenAM
      ssoadm.jsp</citetitle></link>.</para>

      <screen>$ ssoadm
 create-cot
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot cot

Circle of trust, cot was created.
$ ssoadm
 create-metadata-templ
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --entityid xacmlPepEntity
 --xacmlpep /xacmlPepEntity
 --meta-data-file xacmlPep.xml
 --extended-data-file xacmlPep-extended.xml

Hosted entity configuration was written to xacmlPep-extended.xml.
Hosted entity descriptor was written to xacmlPep.xml.
$ ssoadm
 import-entity
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot cot
 --meta-data-file xacmlPep.xml
 --extended-data-file xacmlPep-extended.xml

Import file, xacmlPep.xml.
Import file, xacmlPep-extended.xml.
$ ssoadm
 create-metadata-templ
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --entityid xacmlPdpEntity
 --xacmlpep /xacmlPdpEntity
 --meta-data-file xacmlPdp.xml
 --extended-data-file xacmlPdp-extended.xml

Hosted entity configuration was written to xacmlPdp-extended.xml.
Hosted entity descriptor was written to xacmlPdp.xml.
$ ssoadm
 import-entity
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot cot
 --meta-data-file xacmlPdp.xml
 --extended-data-file xacmlPdp-extended.xml

Import file, xacmlPdp.xml.
Import file, xacmlPdp-extended.xml.</screen>
     </listitem>
    </orderedlist>
  </listitem>

  <listitem>
   <para>Create a policy that allows
   authenticated users to perform an HTTP <literal>GET</literal> on the sample
   <literal>resource.id</literal> URL you configured, such as
   <literal>http://www.example.com:80/banner.html</literal>.</para>

   <para>See <link xlink:href="admin-guide#configure-authz-policy"
   xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Configuring Policies</citetitle></link> for details.</para>
  </listitem>
 </itemizedlist>

 <para>After you have configured OpenAM and the properties files, run the
 sample client script, and observe the XACML request and response.</para>

 <screen width="83">$ sh scripts/run-xacml-client-sample.sh
Using properties file:xacmlClientSample
sample properties:
subject.id.datatype:urn:oasis:names:tc:xacml:1.0:data-type:x500Name
pdp.entityId:xacmlPdpEntity
resource.servicename.datatype:http://www.w3.org/2001/XMLSchema#string
resource.id:http://www.example.com:80/banner.html
resource.servicename:iPlanetAMWebAgentService
action.id.datatype:http://www.w3.org/2001/XMLSchema#string
resource.id.datatype:http://www.w3.org/2001/XMLSchema#string
action.id:GET
subject.category:urn:oasis:names:tc:xacml:1.0:subject-category:access-subject
pep.entityId:xacmlPepEntity
subject.id:id=demo,ou=user,dc=openam,dc=forgerock,dc=org

testProcessRequest():xacmlRequest:

&lt;xacml-context:Request
 xmlns:xacml-context=&quot;urn:oasis:names:tc:xacml:2.0:context:schema:os&quot;
 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
 xsi:schemaLocation=&quot;urn:oasis:names:tc:xacml:2.0:context:schema:os
  http://docs.oasis-open.org/xacml/access_control-xacml-2.0-context-schema-os.xsd&quot;&gt;
&lt;Subject SubjectCategory=
 &quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject&quot;&gt;
&lt;Attribute
 AttributeId=&quot;urn:oasis:names:tc:xacml:1.0:subject:subject-id&quot;
 DataType=&quot;urn:oasis:names:tc:xacml:1.0:data-type:x500Name&quot; &gt;
&lt;AttributeValue
 &gt;id=demo,ou=user,<?eval ${defaultRootSuffix}?>&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;/Subject&gt;
&lt;xacml-context:Resource&gt;
&lt;Attribute
 AttributeId=&quot;ResourceId&quot;
 DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; &gt;
&lt;AttributeValue&gt;http://www.example.com:80/banner.html&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;Attribute
  AttributeId=&quot;urn:sun:names:xacml:2.0:resource:target-service&quot;
  DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; &gt;
&lt;AttributeValue&gt;iPlanetAMWebAgentService&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;/xacml-context:Resource&gt;
&lt;xacml-context:Action&gt;
&lt;Attribute
 AttributeId=&quot;urn:oasis:names:tc:xacml:1.0:action:action-id&quot;
 DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; &gt;
&lt;AttributeValue&gt;GET&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;/xacml-context:Action&gt;
&lt;xacml-context:Environment&gt;&lt;/xacml-context:Environment&gt;
&lt;/xacml-context:Request&gt;

testProcessRequest():xacmlResponse:
&lt;xacml-context:Response
 xmlns:xacml-context=&quot;urn:oasis:names:tc:xacml:2.0:context:schema:os&quot; &gt;
&lt;xacml-context:Result ResourceId=&quot;http://www.example.com:80/banner.html&quot;&gt;
&lt;xacml-context:Decision&gt;Permit&lt;/xacml-context:Decision&gt;
&lt;xacml-context:Status&gt;
&lt;xacml-context:StatusCode
 Value=&quot;urn:oasis:names:tc:xacml:1.0:status:ok&quot;&gt;
&lt;/xacml-context:StatusCode&gt;
&lt;xacml-context:StatusMessage&gt;ok&lt;/xacml-context:StatusMessage&gt;
&lt;xacml-context:StatusDetail
 xmlns:xacml-context=&quot;urn:oasis:names:tc:xacml:2.0:context:schema:cd:04&quot;&gt;
&lt;xacml-context:StatusDetail/&gt;&lt;/xacml-context:StatusDetail&gt;
&lt;/xacml-context:Status&gt;
&lt;/xacml-context:Result&gt;
&lt;/xacml-context:Response&gt;</screen>
</chapter>
