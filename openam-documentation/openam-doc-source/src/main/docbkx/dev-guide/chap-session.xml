<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2013 ForgeRock AS
  !    
-->
<chapter xml:id='chap-session'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Handling Single Sign-On Using OpenAM Java SDK</title>
 <indexterm>
  <primary>Session tokens</primary>
  <secondary>Java API</secondary>
 </indexterm>
 <para>This chapter looks at handling session tokens with the OpenAM Java SDK.
 The class shown in this chapter is
 <literal>com.sun.identity.samples.sso.SSOTokenSample</literal>.</para>

 <para>When a user authenticates successfully, OpenAM sets up a single sign-on
 (SSO) session for the user. The session is associated with an SSO token that
 holds information about the authentication, and also about the user's
 environment and session. OpenAM deletes the session when the authentication
 context <literal>logout()</literal> method is called, or when a session timeout
 is reached. At that point the SSO token is no longer valid.</para>

 <para>When your application has an <literal>AuthContext</literal> after
 successful authentication, you can retrieve the SSO token from the context.
 You also can get the token as shown in the sample client by passing an SSO
 token ID from OpenAM to an <literal>SSOTokenManager</literal>.</para>

 <para>If your application needs to be notified of changes, you can register
 an <literal>SSOTokenListener</literal> on the token by using the token's
 <literal>addSSOTokenListener()</literal> method. OpenAM then calls your
 <literal>SSOTokenListener</literal> <literal>ssoTokenChanged()</literal>
 method when the session times out, is disposed of, or has a property that
 changes.</para>

 <para>The sample client takes an SSO token ID to get the token from OpenAM,
 and then displays some information from the SSO token. The implementation of
 the sample client follows.</para>

 <programlisting language="java">package com.sun.identity.samples.sso;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.InetAddress;
import com.iplanet.sso.SSOException;
import com.iplanet.sso.SSOToken;
import com.iplanet.sso.SSOTokenID;
import com.iplanet.sso.SSOTokenManager;

public class SSOTokenSample {
    private SSOTokenManager manager;
    private SSOToken token;

    private SSOTokenSample(String tokenID)
        throws SSOException
    {
        if (validateToken(tokenID)) {
            setGetProperties(token);
        }
    }

    private boolean validateToken(String tokenID)
        throws SSOException
    {
        boolean validated = false;
        manager = SSOTokenManager.getInstance();
        token = manager.createSSOToken(tokenID);

        // isValid method returns true for valid token.
        if (manager.isValidToken(token)) {
                // let us get all the values from the token
            String host = token.getHostName();
            java.security.Principal principal = token.getPrincipal();
            String authType = token.getAuthType();
            int level = token.getAuthLevel();
            InetAddress ipAddress = token.getIPAddress();
            long maxTime = token.getMaxSessionTime();
            long idleTime = token.getIdleTime();
            long maxIdleTime = token.getMaxIdleTime();
                
            System.out.println("SSOToken host name: " + host);
            System.out.println("SSOToken Principal name: " +
                principal.getName());
            System.out.println("Authentication type used: " + authType);
            System.out.println("IPAddress of the host: " +
                ipAddress.getHostAddress());
            validated = true;
        }

        return validated;
    }

    private void setGetProperties(SSOToken token)
        throws SSOException
    {
        /*
         * Validate the token again, with another method
         * if token is invalid, this method throws an exception
         */
        manager.validateToken(token);
        System.out.println("SSO Token validation test Succeeded.");
            
        // Get the SSOTokenID associated with the token and print it.
        SSOTokenID id = token.getTokenID();
        String tokenId = id.toString();
        System.out.println("Token ID: " + tokenId);

        // Set and get properties in the token.
        token.setProperty("TimeZone", "PST");
        token.setProperty("County", "SantaClara");
        String tZone = token.getProperty("TimeZone");
        String county = token.getProperty("County");

        System.out.println("Property: TimeZone: " + tZone); 
        System.out.println("Property: County: " + county); 
    }

    public static void main(String[] args) {
        try {
            System.out.print("Enter SSOToken ID: ");
            String ssoTokenID = (new BufferedReader(
                new InputStreamReader(System.in))).readLine();
            new SSOTokenSample(ssoTokenID.trim());
        } catch (SSOException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.exit(0);
    }

}</programlisting>

 <para>Before you run the script that calls the sample, authenticate to OpenAM
 in order to have OpenAM generate the SSO token ID. To see the SSO token ID,
 use the RESTful <literal>authenticate</literal> command as shown in the
 following example, or alternatively run the
 <literal>SSOTokenSampleServlet</literal> web-based sample.</para>

 <screen>$ curl
 --request POST
 --data "username=demo&amp;password=changeit"
 http://openam.example.com:8080/openam/identity/authenticate
token.id=AQIC5wM2LY4Sfcyy10grl...AlNLABQtNjI4OTkyNTUxNTc4MDQ3NzEzOQ..*
$ sh scripts/SSOTokenSample.sh
Enter SSOToken ID: AQIC5wM2LY4Sfcyy10grl...AlNLABQtNjI4OTkyNTUxNTc4MDQ3NzEzOQ..*
SSOToken host name: 172.16.203.239
SSOToken Principal name: id=demo,ou=user,dc=openam,dc=forgerock,dc=org
Authentication type used: DataStore
IPAddress of the host: 172.16.203.239
SSO Token validation test Succeeded.
Token ID: AQIC5wM2LY4Sfcyy10grl...AlNLABQtNjI4OTkyNTUxNTc4MDQ3NzEzOQ..*
Property: TimeZone: PST
Property: County: SantaClara</screen>

 <para>Notice both the properties populated by OpenAM, and also the two
 properties, <literal>TimeZone</literal> and <literal>County</literal>, that
 are set by the sample client.</para>
 
 <section xml:id="session-receiving-notifications">
  <title>Receiving Notifications</title>

  <para>If your application implements a listener for change notification, such
  as a <literal>SessionListener</literal> to handle notification when a session
  is invalidated, then you must configure the following settings in the
  <filename>AMConfig.properties</filename> configuration file for your
  application.</para>

  <variablelist>
   <varlistentry>
    <term>com.iplanet.am.notification.url</term>
    <listitem>
     <para>Set this parameter to
     <literal>http://<replaceable>host</replaceable>:<replaceable
     >port</replaceable>/<replaceable>context</replaceable
     >/notificationservice</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>com.iplanet.am.sdk.caching.enabled</term>
    <listitem>
     <para>Set this parameter to <literal>true</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>com.iplanet.am.serverMode</term>
    <listitem>
     <para>Set this parameter to <literal>false</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>com.sun.identity.client.notification.url</term>
    <listitem>
     <para>Set this parameter to
     <literal>http://<replaceable>host</replaceable>:<replaceable
     >port</replaceable>/<replaceable>context</replaceable
     >/notificationservice</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>com.sun.identity.idm.cache.enabled</term>
    <listitem>
     <para>Set this parameter to <literal>true</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>com.sun.identity.idm.remote.notification.enabled</term>
    <listitem>
     <para>Set this parameter to <literal>true</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>com.sun.identity.sm.cache.enabled</term>
    <listitem>
     <para>Set this parameter to <literal>true</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>com.sun.identity.sm.enableDataStoreNotification</term>
    <listitem>
     <para>Set this parameter to <literal>true</literal>.</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>The above configuration to access the notification service also applies
  for other types of listeners, such as <literal>ServiceListener</literal>, and
  <literal>IdEventListener</literal> implementations. See the <link
  xlink:href="${javadocBase}" xlink:show="new"><citetitle>OpenAM Java SDK API
  Specification</citetitle></link> for details on the available listener
  interfaces.</para>
 </section>
</chapter>
