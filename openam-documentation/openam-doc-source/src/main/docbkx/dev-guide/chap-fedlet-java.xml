<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2013 ForgeRock AS
  !    
-->
<chapter xml:id='chap-fedlet-java'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Using Fedlets in Java Web Applications</title>
 <indexterm>
  <primary>Fedlets</primary>
  <secondary>Java</secondary>
 </indexterm>
 <para>This chapter introduces OpenAM Fedlets, and shows how to use the Fedlet
 as part of your Java web application.</para>

 <section xml:id="create-install-java-fedlet">
  <title>Creating &amp; Installing a Java Fedlet</title>

  <para>An OpenAM <firstterm>Fedlet</firstterm> is a small web application that
  can do federation in your service provider application with OpenAM acting as
  the identity provider. The Fedlet does not require an entire OpenAM
  installation alongside your application, but instead can redirect to OpenAM
  for single sign on, and to retrieve SAML assertions.</para>

  <para>The process for creating and installing a Java Fedlet is divided into several procedures.</para>

  <itemizedlist>
    <listitem><para><xref linkend="create-a-java-fedlet" /></para></listitem>
    <listitem><para><xref linkend="install-fedlet-as-demo" /></para></listitem>
    <listitem><para><xref linkend="try-fedlet-attribute-query" /></para></listitem>
    <listitem><para><xref linkend="try-fedlet-xacml-query" /></para></listitem>
  </itemizedlist>


  <procedure xml:id="create-a-java-fedlet">
   <title>To Create a Fedlet</title>
   <para>The OpenAM administrator running the identity provider server creates
   a <filename>Fedlet.zip</filename> file for your service provider application,
   and then sends you the .zip.</para>

   <step>
    <para>Before creating the Fedlet, create a Hosted Identity Provider if
    you have not already done so, using the test certificate for the signing
    key.</para>

    <para>The single sign-on and single logout features that the Java Fedlet
    demonstrates do work with the Hosted Identity Provider you create starting
    from the Common Tasks page. The Java Fedlet Attribute Query and XACML Query
    tests require additional configuration, however.</para>

    <para>See <xref linkend="try-fedlet-attribute-query" /> and
    <xref linkend="try-fedlet-xacml-query" /> for details.</para>
   </step>

   <step>
    <para>On the Common Tasks page of the OpenAM console, click Create
    Fedlet.</para>
   </step>
   <step>
    <para>Note that the Circle of Trust includes your hosted identity provider,
    and that Identity Provider is set to your to hosted identity
    provider.</para>
   </step>
   <step>
    <para>Name the Fedlet, and also set the Destination URL.</para>
    <para>You can use the deployment URL, such as
    <literal>http://openam.example.com:8080/fedlet</literal> as both the name and
    the destination URL.</para>
   </step>
   <step>
    <para>Click create to generate the Fedlet.zip file, such as
    <filename>$HOME/openam/myfedlets/httpopenamexamplecom8080fedlet/Fedlet.zip</filename>.</para>
   </step>
   <step>
    <para>Provide the Fedlet to the service provider, or install it yourself to
    demonstrate the Fedlet's features.</para>
   </step>
  </procedure>
 
  <procedure xml:id="install-fedlet-as-demo">
   <title>To Install the Fedlet as a Demo Application</title>
   <para><filename>Fedlet.zip</filename> includes the
   <filename>fedlet.war</filename> archive corresponding to the identity
   provider, and a <filename>README</filename> file.</para>

   <itemizedlist>
    <listitem>
     <para>The <filename>fedlet.war</filename> archive contains both the Fedlet
     as a demo web application, and also the files you use to include the Fedlet
     in your service provider application.</para>
    </listitem>
    <listitem>
     <para>The README file describes how to use the Fedlet.</para>
    </listitem>
   </itemizedlist>

   <para>Perform the following steps to try single sign-on and single logout
   tests. For the attribute query and XACML query tests, additional configuration
   is required.</para>

   <step>
    <para>Deploy the Fedlet in your web container.</para>
    <screen>$ unzip Fedlet.zip
$ mv fedlet.war /path/to/tomcat/webapps</screen>
   </step>
   <step>
    <para>Browse to the Fedlet URL, and then click the links to set up the
    configuration directory in <filename>$HOME/fedlet</filename>, where $HOME
    corresponds to the user running the web application container.</para>
   </step>

   <step>
    <para>Try one or more examples from the Fedlet home page to validate Fedlet
    setup.</para>
    <mediaobject xml:id="figure-fedlet-demo">
     <alt>Home page for demo Fedlet</alt>
     <imageobject>
      <imagedata fileref="images/fedlet-demo.png" format="PNG" />
     </imageobject>
     <textobject>
      <para>The home page for the demo Fedlet lets you try Fedlet (SP)
      initiated and IDP initiated single sign on and single logout.</para>
     </textobject>
    </mediaobject>
    <para>After setting up OpenAM with the default subjects, you can login on
    the identity provider with user name <literal>demo</literal> and password
    <literal>changeit</literal>.</para>
   </step>
  </procedure>

  <procedure xml:id="try-fedlet-attribute-query">
   <title>To Try the Fedlet Attribute Query</title>

   <para>To try the Fedlet Attribute Query test, the Identity Provider
   must be configured with the Attribute Authority (<literal>AttrAuth</literal>)
   type and should sign responses. The Fedlet must be configured to deal with
   signed responses. Furthermore, map the attributes to request in both the
   Identity Provider and the Fedlet configurations.</para>

   <step>
    <para>Add the Attribute Authority type to the hosted Identity Provider.</para>

    <substeps>
     <step>
      <para>On OpenAM where the Identity Provider is hosted, log in to OpenAM
      console as <literal>amadmin</literal>.</para>
     </step>

     <step>
      <para>Under Federation &gt; Entity Providers, select the Identity Provider,
      and then click New..., even though you plan to change the configuration
      rather than create a new provider.</para>
     </step>

     <step>
      <para>Select the protocol of the provider: SAMLv2.</para>
     </step>

     <step>
      <para>In the Create SAMLv2 Entity Provider page, do the following.</para>

      <itemizedlist>
       <listitem>
        <para>Set the Realm.</para>
       </listitem>

       <listitem>
        <para>Set the Entity Identifier to the same entity identifier you
        selected in the previous screen.</para>
       </listitem>

       <listitem>
        <para>In the Attribute Authority section, set the Meta Alias for example
        to <literal>/attra</literal>, and set the Signing certificate alias and
        Encryption certificate alias values to <literal>test</literal> (to use
        the test certificate).</para>
       </listitem>

       <listitem>
        <para>Click Create to save your changes.</para>

        <para>Disregard any error messages stating that the entity already
        exists.</para>
       </listitem>
      </itemizedlist>

      <para><literal>AttrAuth</literal> now appears in the list of Types for
      your Identity Provider.</para>
     </step>
    </substeps>
   </step>

   <step>
    <para>Under Federation &gt; Entity Providers, click the Identity Provider
    link to open the provider's configuration.</para>
   </step>

   <step>
    <para>Make sure attributes for the query are mapped on the Identity
    Provider.</para>

    <para>Under IDP &gt; Attribute Mapper, add the following values to the
    Attribute Map if they are not yet present.</para>

    <itemizedlist>
     <listitem><para><literal>cn=cn</literal></para></listitem>
     <listitem><para><literal>sn=sn</literal></para></listitem>
     <listitem><para><literal>uid=uid</literal></para></listitem>
    </itemizedlist>
    
    <note>
     <para>Make sure to use thread-safe code if you implement the AttributeAuthorityMapper.
     You can use the attributes on the HttpRequest instead of synchronizing them. The 
     default AttributeAuthorityMapper uses an attribute on the HttpServletRequest to
     pass information to the AttributeQueryUtil.</para>
    </note>

    <para>Click Save to save your changes.</para>
   </step>

   <step>
    <para>Create the Fedlet as described in <xref linkend="create-a-java-fedlet" />,
    making sure you map the attributes.</para>

    <itemizedlist>
     <listitem><para><literal>cn=cn</literal></para></listitem>
     <listitem><para><literal>sn=sn</literal></para></listitem>
     <listitem><para><literal>uid=uid</literal></para></listitem>
    </itemizedlist>

    <para>This step creates a Fedlet with updated Identity Provider metadata.
    If you already created a Fedlet, either use a different name, or delete
    the existing Fedlet.</para>
   </step>

   <step>
    <para>Deploy the new Fedlet .war as described in <xref linkend="install-fedlet-as-demo" />.</para>
   </step>

   <step>
    <para>Edit the new Fedlet configuration to request signing and encryption,
    and replace the existing configuration in OpenAM with the edited
    configuration.</para>

    <substeps>
     <step>
      <para>Copy the test key store from OpenAM, and prepare password files.</para>

      <screen>$ scp user@openam:/home/user/openam/openam/keystore.jks ~/fedlet/</screen>

      <para>The Fedlet uses password files when accessing the keystore. These
      password files contain encoded passwords, where the encoding is specific
      to the Fedlet.</para>

      <para>To encode the password, use <literal>fedletEncode.jsp</literal>.
      <literal>fedletEncode.jsp</literal> is in the deployed Fedlet, for example
      <literal>http://openam.example.com:8080/fedlet/fedletEncode.jsp</literal>.
      The only password to encode for OpenAM's test keystore is
      <literal>changeit</literal>, because the key store and private key
      passwords are both the same.</para>

      <para>Use the encoded value to create the password files as in the
      following example.</para>

      <screen>$ echo AQIC5BHNSjLwT303GqndmHbyYvzP9Tz7OAnK > ~/fedlet/.storepass
$ echo AQIC5BHNSjLwT303GqndmHbyYvzP9Tz7OAnK > ~/fedlet/.keypass</screen>
     </step>

     <step>
      <para>Edit <filename>~/fedlet/sp.xml</filename> to use the test
      certificate for the attribute query.</para>

      <para>Change the following:</para>

      <programlisting language="xml">&lt;RoleDescriptor xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:query=&quot;urn:oasis:names:tc:SAML:metadata:ext:query&quot;
    xsi:type=&quot;query:AttributeQueryDescriptorType&quot;
    protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;&gt;
 &lt;/RoleDescriptor&gt;</programlisting>

      <para>To:</para>

      <programlisting language="xml"> &lt;RoleDescriptor xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:query=&quot;urn:oasis:names:tc:SAML:metadata:ext:query&quot;
    xsi:type=&quot;query:AttributeQueryDescriptorType&quot;
    protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;&gt;
  &lt;KeyDescriptor use=&quot;signing&quot;&gt;
   &lt;ds:KeyInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;
    &lt;ds:X509Data&gt;
     &lt;ds:X509Certificate&gt;
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==
     &lt;/ds:X509Certificate&gt;
    &lt;/ds:X509Data&gt;
   &lt;/ds:KeyInfo&gt;
  &lt;/KeyDescriptor&gt;
  &lt;KeyDescriptor use=&quot;encryption&quot;&gt;
   &lt;ds:KeyInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;
    &lt;ds:X509Data&gt;
     &lt;ds:X509Certificate&gt;
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==
     &lt;/ds:X509Certificate&gt;
    &lt;/ds:X509Data&gt;
   &lt;/ds:KeyInfo&gt;
   &lt;EncryptionMethod Algorithm=&quot;http://www.w3.org/2001/04/xmlenc#aes128-cbc&quot;&gt;
    &lt;xenc:KeySize xmlns:xenc=&quot;http://www.w3.org/2001/04/xmlenc#&quot;
      &gt;128&lt;/xenc:KeySize&gt;
   &lt;/EncryptionMethod&gt;
  &lt;/KeyDescriptor&gt;
 &lt;/RoleDescriptor&gt;</programlisting>
     </step>

     <step>
      <para>Edit <filename>~/fedlet/sp-extended.xml</filename> to use the test
      certificate for the attribute query.</para>

      <para>Change the following, assuming your Circle of Trust is called
      <literal>cot</literal>:</para>

      <programlisting language="xml">&lt;AttributeQueryConfig metaAlias=&quot;/attrQuery&quot;&gt;
    &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
        &lt;Value&gt;&lt;/Value&gt;
    &lt;/Attribute&gt;
    &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
        &lt;Value&gt;&lt;/Value&gt;
    &lt;/Attribute&gt;
    &lt;Attribute name=&quot;wantNameIDEncrypted&quot;&gt;
        &lt;Value&gt;&lt;/Value&gt;
    &lt;/Attribute&gt;
    &lt;Attribute name=&quot;cotlist&quot;&gt;
        &lt;Value&gt;cot&lt;/Value&gt;
    &lt;/Attribute&gt;
&lt;/AttributeQueryConfig&gt;</programlisting>

      <para>To:</para>

      <programlisting language="xml">&lt;AttributeQueryConfig metaAlias=&quot;/attrQuery&quot;&gt;
    &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
        &lt;Value&gt;test&lt;/Value&gt;
    &lt;/Attribute&gt;
    &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
        &lt;Value&gt;test&lt;/Value&gt;
    &lt;/Attribute&gt;
    &lt;Attribute name=&quot;wantNameIDEncrypted&quot;&gt;
        &lt;Value&gt;true&lt;/Value&gt;
    &lt;/Attribute&gt;
    &lt;Attribute name=&quot;cotlist&quot;&gt;
        &lt;Value&gt;cot&lt;/Value&gt;
    &lt;/Attribute&gt;
&lt;/AttributeQueryConfig&gt;</programlisting>
     </step>

     <step>
      <para>In OpenAM Console, under Federation &gt; Entity Providers, delete
      the existing configuration for your new Fedlet.</para>
     </step>

     <step>
      <para>Under Federation &gt; Entity Providers, click Import Entity... and
      import your updated Fedlet configuration.</para>

      <para>This ensures OpenAM has the correct service provider configuration
      for your new Fedlet.</para>
     </step>

     <step>
      <para>Restart the Fedlet or the container where it is deployed.</para>
     </step>
    </substeps>
   </step>

   <step>
    <para>Try the Attribute Query test.</para>

    <substeps>
     <step>
      <para>Access the Fedlet.</para>

      <mediaobject xml:id="figure-fedlet-sso-request">
       <alt>Home page for demo Fedlet</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-sso-request.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>The home page for the demo Fedlet lets you try Fedlet (SP)
        initiated and IDP initiated single sign on and single logout.</para>
       </textobject>
      </mediaobject>
     </step>

     <step>
      <para>Try SSO with user name <literal>demo</literal>, password
      <literal>changeit</literal>.</para>

      <mediaobject xml:id="figure-fedlet-sso-response">
       <alt>Fedlet SSO response page</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-sso-response.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>After signing in, you should see information about the
        authentication and also other tests to try.</para>
       </textobject>
      </mediaobject>
     </step>

     <step>
      <para>Click Fedlet Attribute Query, set the attributes in the Attribute
      Query page to match the mapped attributes, and then click Submit.</para>

      <mediaobject xml:id="figure-fedlet-attr-query-request">
       <alt>Fedlet Attribute Query request page</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-attr-query-request.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>After signing in, you can try the Attribute Query demo.</para>
       </textobject>
      </mediaobject>
     </step>

     <step>
      <para>Check that you see the attribute values in the response.</para>

      <mediaobject xml:id="figure-fedlet-attr-query-response">
       <alt>Fedlet Attribute Query response page</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-attr-query-response.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>The responses for each attribute value in this case should be
        <literal>demo</literal>.</para>
       </textobject>
      </mediaobject>
     </step>
    </substeps>
   </step>
  </procedure>

  <procedure xml:id="try-fedlet-xacml-query">
   <title>To Try the Fedlet XACML Query</title>

   <para>To try the Fedlet XACML Query test, the Identity Provider
   must have a policy configured, must be configured with the Policy Decision
   Point (<literal>XACML PDP</literal>) type, and must have a SAMLv2 SOAP Binding
   PDP handler configured.</para>

   <step>
    <para>Configure a policy on the hosted Identity Provider.</para>

    <para>OpenAM uses the policy to make the decision whether to permit or deny
    access to a resource. For the purpose of the demonstration, configure a
    simple policy that allows all authenticated users HTTP GET access on
    <literal>http://www.example.com/</literal>.</para>

    <substeps>
     <step>
      <para>Log in to OpenAM console as <literal>amadmin</literal>.</para>
     </step>

     <step>
      <para>Under Access Control &gt; <replaceable>realm-name</replaceable> &gt;
      Policies, click New Policy...</para>
     </step>

     <step>
      <para>Set Name: Test policy.</para>
     </step>

     <step>
      <para>Click Rules &gt; New... and set the following.</para>

      <itemizedlist>
       <listitem><para>Service Type: <literal>URL Policy Agent</literal></para></listitem>
       <listitem><para>Name: <literal>http://www.example.com/</literal></para></listitem>
       <listitem><para>Resource Name: <literal>http://www.example.com/</literal></para></listitem>
       <listitem><para>Actions: allow <literal>GET</literal></para></listitem>
      </itemizedlist>

      <para>Then click Finish.</para>
     </step>

     <step>
      <para>Click Subjects &gt; New... and set the following.</para>

      <itemizedlist>
       <listitem><para>Type: <literal>Authenticated Users</literal></para></listitem>
       <listitem><para>Name: <literal>All authenticated users</literal></para></listitem>
      </itemizedlist>

      <para>Then click Finish.</para>
     </step>

     <step>
      <para>Click OK to save the new Test policy.</para>
     </step>
    </substeps>
   </step>

   <step>
    <para>Add the Policy Decision Point type to the Identity Provider.</para>

    <substeps>
     <step>
      <para>Under Federation &gt; Entity Providers, select the Identity Provider,
      and then click New..., even though you plan to change the configuration
      rather than create a new provider.</para>
     </step>

     <step>
      <para>Select the protocol of the provider: SAMLv2.</para>
     </step>

     <step>
      <para>In the Create SAMLv2 Entity Provider page, do the following.</para>

      <itemizedlist>
       <listitem>
        <para>Set the Realm.</para>
       </listitem>

       <listitem>
        <para>Set the Entity Identifier to the entity identifier for the hosted
        Identity Provider.</para>
       </listitem>

       <listitem>
        <para>In the XACML Policy Decision Point section, set the Meta Alias for
        example to <literal>/pdp</literal>.</para>
       </listitem>

       <listitem>
        <para>Click Create to save your changes.</para>

        <para>Disregard any error messages stating that the entity already
        exists.</para>
       </listitem>
      </itemizedlist>

      <para><literal>XACML PDP</literal> now appears in the list of Types for
      your identity provider.</para>
     </step>
    </substeps>
   </step>

   <step>
    <para>Add the PDP handler for the SAMLv2 SOAP Binding.</para>

    <substeps>
     <step>
      <para>Under Configuration &gt; Global &gt; SAMLv2 SOAP Binding, click
      New...</para>
     </step>

     <step>
      <para>Set the new key to match the meta alias you used when adding the
      XACML PDP type to the Identity Provider configuration, for example
      <literal>/pdp</literal>.</para>

      <itemizedlist>
       <listitem><para>Key: <literal>/pdp</literal></para></listitem>
       <listitem><para>Class: <literal>com.sun.identity.xacml.plugins.XACMLAuthzDecisionQueryHandler</literal></para></listitem>
      </itemizedlist>

      <para>Click OK. (Your changes are not saved, yet.)</para>
     </step>

     <step>
      <para>Click Save to actually save the new Key:Class pair.</para>
     </step>
    </substeps>
   </step>

   <step>
    <para>Create the Fedlet as described in <xref linkend="create-a-java-fedlet" />.</para>

    <para>This step creates a Fedlet with updated identity provider metadata.
    If you already created a Fedlet, either use a different name, or delete
    the existing Fedlet.</para>
   </step>

   <step>
    <para>Deploy the new Fedlet .war as described in <xref linkend="install-fedlet-as-demo" />.</para>
   </step>

   <step>
    <para>Try the XACML Query test.</para>

    <substeps>
     <step>
      <para>Access the Fedlet.</para>

      <mediaobject xml:id="figure-fedlet-sso-request-xacml">
       <alt>Home page for demo Fedlet</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-sso-request.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>The home page for the demo Fedlet lets you try Fedlet (SP)
        initiated and IDP initiated single sign on and single logout.</para>
       </textobject>
      </mediaobject>
     </step>

     <step>
      <para>Try SSO with user name <literal>demo</literal>, password
      <literal>changeit</literal>.</para>

      <mediaobject xml:id="figure-fedlet-sso-response-xacml">
       <alt>Fedlet SSO response page</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-sso-response.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>After signing in, you should see information about the
        authentication and also other tests to try.</para>
       </textobject>
      </mediaobject>
     </step>

     <step>
      <para>Click XACML Attribute Query, set the Resource URL in the XACML
      Query page to <literal>http://www.example.com/</literal>, and then
      click Submit.</para>

      <mediaobject xml:id="figure-fedlet-xacml-query-request">
       <alt>Fedlet XACML Query request page</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-xacml-query-request.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>After signing in, you can try the XACML Query demo.</para>
       </textobject>
      </mediaobject>
     </step>

     <step>
      <para>Check that you see the permit decision in the response.</para>

      <mediaobject xml:id="figure-fedlet-xacml-query-response">
       <alt>Fedlet XACML Query response page</alt>
       <imageobject>
        <imagedata fileref="images/fedlet-xacml-query-response.png" format="PNG" />
       </imageobject>
       <textobject>
        <para>The response is to permit the user to access the resource.</para>
       </textobject>
      </mediaobject>
     </step>
    </substeps>
   </step>
  </procedure>
 </section>

 <section xml:id="fedlet-signing-encryption">
  <title>Signing &amp; Encryption For a Fedlet</title>

  <para>By default when you create the Java Fedlet, signing and encryption are
  not configured. You can however set up OpenAM and the fedlet to sign and
  to verify XML signatures and to encrypt and to decrypt data such as SAML
  assertions. If you have tried the Attribute Query demonstration, then you
  have already configured the Fedlet to request signing and encryption using
  the test keys from the identity provider.</para>

  <itemizedlist>
   <para>Enable signing and encryption for the Java Fedlet involves the
   following high level stages.</para>
   <listitem>
    <para>Before you create the Fedlet, configure the IDP to sign and encrypt
    data. See Federation &gt; Entity Providers &gt; <replaceable>IDP
    Name</replaceable> &gt; Signing and Encryption in the OpenAM console.</para>
    <para>For evaluation, you can use the <literal>test</literal> certificate
    delivered with OpenAM.</para>
   </listitem>
   <listitem>
    <para>Initially deploy and configure the Fedlet, but do not use the Fedlet
    until you finish.</para>
   </listitem>
   <listitem>
    <para>On the Fedlet side set up a JKS keystore used for signing and
    encryption. For evaluation, you can use copy the
    <filename>keystore.jks</filename> file delivered with OpenAM. You can find
    the file under the configuration directory for OpenAM, such as
    <filename>$HOME/openam/openam/</filename> for a server instance with
    base URI <literal>openam</literal>. The built-in keystore includes the
    <literal>test</literal> certificate.</para>
    <para>You must also set up <filename>.storepass</filename> and
    <filename>.keypass</filename> files using the
    <filename>fedletEncode.jsp</filename> page, such as
    <literal>http://openam.example.com:8080/fedlet/fedletEncode.jsp</literal>, to
    encode passwords on the Fedlet side. The passwords for the test key store
    and private key are both <literal>changeit</literal>.</para>
   </listitem>
   <listitem>
    <para>Configure the Fedlet to perform signing and encryption by ensuring
    the Fedlet has access to the key store, and by updating the SP metadata
    for the Fedlet.</para>
   </listitem>
   <listitem>
    <para>Import the updated SP metadata into the IDP to replace the default
    Fedlet configuration.</para>
   </listitem>
   <listitem>
    <para>Restart the Fedlet or container in which the Fedlet runs for the
    changes you made on the Fedlet side to take effect.</para>
   </listitem>
  </itemizedlist>

  <procedure xml:id="fedlet-conf-signing-encryption">
   <title>To Configure the Fedlet For Signing &amp; Encryption</title>

   <para>The <filename>FederationConfig.properties</filename> file specifies
   the paths to the JKS keystore holding the signing or encryption keys for
   the Fedlet, the keystore password file, and the private key password
   file.</para>

   <step>
    <para>After setting up your keystore and password files as described above,
    edit the properties file in the configuration directory, such as
    <filename>$HOME/fedlet/FederationConfig.properties</filename>, to point
    to the keystore and password files.</para>
   </step>
   <step>
    <para>Export the certificate to use for signing and encryption
    purposes.</para>

    <screen>$ keytool -export -rfc -keystore keystore.jks -alias test
Enter keystore password:
-----BEGIN CERTIFICATE-----
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==</screen>
   </step>

   <step>
    <para>Edit the standard metadata file for the Fedlet, such as
    <filename>$HOME/fedlet/sp.xml</filename>, to include the certificate
    in KeyDescriptor elements, that are children of the SPSSODescriptor
    element.</para>

    <programlisting language="xml">&lt;EntityDescriptor
 xmlns=&quot;urn:oasis:names:tc:SAML:2.0:metadata&quot;
 entityID=&quot;http://www.example.com:8080/fedlet&quot;&gt;
 &lt;SPSSODescriptor
  AuthnRequestsSigned=&quot;true&quot;
  WantAssertionsSigned=&quot;true&quot;
  protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;&gt;
  &lt;KeyDescriptor use=&quot;signing&quot;&gt;
   &lt;ds:KeyInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;
    &lt;ds:X509Data&gt;
     &lt;ds:X509Certificate&gt;
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==
     &lt;/ds:X509Certificate&gt;
    &lt;/ds:X509Data&gt;
   &lt;/ds:KeyInfo&gt;
  &lt;/KeyDescriptor&gt;
  &lt;KeyDescriptor use=&quot;encryption&quot;&gt;
   &lt;ds:KeyInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;
    &lt;ds:X509Data&gt;
     &lt;ds:X509Certificate&gt;
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==
     &lt;/ds:X509Certificate&gt;
    &lt;/ds:X509Data&gt;
   &lt;/ds:KeyInfo&gt;
   &lt;EncryptionMethod Algorithm=&quot;http://www.w3.org/2001/04/xmlenc#aes128-cbc&quot;&gt;
    &lt;xenc:KeySize xmlns:xenc=&quot;http://www.w3.org/2001/04/xmlenc#&quot;&gt;
     128
    &lt;/xenc:KeySize&gt;
   &lt;/EncryptionMethod&gt;
  &lt;/KeyDescriptor&gt;
  &lt;SingleLogoutService
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletSloRedirect&quot;
   ResponseLocation=&quot;http://www.example.com:8080/fedlet/fedletSloRedirect&quot; /&gt;
  &lt;SingleLogoutService
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletSloPOST&quot;
   ResponseLocation=&quot;http://www.example.com:8080/fedlet/fedletSloPOST&quot; /&gt;
  &lt;SingleLogoutService
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:SOAP&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletSloSoap&quot; /&gt;
  &lt;NameIDFormat&gt;
   urn:oasis:names:tc:SAML:2.0:nameid-format:transient
  &lt;/NameIDFormat&gt;
  &lt;AssertionConsumerService
   index=&quot;0&quot;
   isDefault=&quot;true&quot;
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletapplication&quot; /&gt;
  &lt;AssertionConsumerService
   index=&quot;1&quot;
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletapplication&quot; /&gt;
 &lt;/SPSSODescriptor&gt;
 &lt;RoleDescriptor
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xmlns:query=&quot;urn:oasis:names:tc:SAML:metadata:ext:query&quot;
  xsi:type=&quot;query:AttributeQueryDescriptorType&quot;
  protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;&gt;
 &lt;/RoleDescriptor&gt;
 &lt;XACMLAuthzDecisionQueryDescriptor
  WantAssertionsSigned=&quot;false&quot;
  protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot; /&gt;
&lt;/EntityDescriptor&gt;</programlisting>
   </step>
   <step>
    <para>Edit the extended metadata file for the Fedlet, such as
    <filename>$HOME/fedlet/sp-extended.xml</filename>, to set the certificate
    alias names to the alias for the Fedlet certificate, and the
    <literal>want*Signed</literal> and <literal>want*Encrypted</literal> values
    to <literal>true</literal>.</para>

    <para>If you reformat the file, take care not to add white space around
    string values in elements.</para>

    <programlisting language="xml" width="88"><?dbfo pgwide="1"?>
&lt;EntityConfig xmlns=&quot;urn:sun:fm:SAML:2.0:entityconfig&quot;
 xmlns:fm=&quot;urn:sun:fm:SAML:2.0:entityconfig&quot; hosted=&quot;1&quot;
 entityID=&quot;http://www.example.com:8080/fedlet&quot;&gt;
 &lt;SPSSOConfig metaAlias=&quot;/sp&quot;&gt;
  &lt;Attribute name=&quot;description&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthOn&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthUser&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthPassword&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;autofedEnabled&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;autofedAttribute&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;transientUser&quot;&gt;
   &lt;Value&gt;anonymous&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAdapter&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAdapterEnv&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;fedletAdapter&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultFedletAdapter&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;fedletAdapterEnv&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAccountMapper&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultLibrarySPAccountMapper&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;useNameIDAsSPUserID&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAttributeMapper&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultSPAttributeMapper&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAuthncontextMapper&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAuthncontextClassrefMapping&quot;&gt;
   &lt;Value
   &gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport|0|default&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAuthncontextComparisonType&quot;&gt;
   &lt;Value&gt;exact&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;attributeMap&quot;&gt;
   &lt;Value&gt;*=*&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saml2AuthModuleName&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;localAuthURL&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;intermediateUrl&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;defaultRelayState&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;appLogoutUrl&quot;&gt;
   &lt;Value&gt;http://www.example.com:8080/fedlet/logout&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;assertionTimeSkew&quot;&gt;
   &lt;Value&gt;300&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantAttributeEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantAssertionEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantNameIDEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantPOSTResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantArtifactResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantLogoutRequestSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantLogoutResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantMNIRequestSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantMNIResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;responseArtifactMessageEncoding&quot;&gt;
   &lt;Value&gt;URI&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;cotlist&quot;&gt;
   &lt;Value&gt;fedlet-cot&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saeAppSecretList&quot;&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saeSPUrl&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saeSPLogoutUrl&quot;&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;ECPRequestIDPListFinderImpl&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.ECPIDPFinder&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;ECPRequestIDPList&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;ECPRequestIDPListGetComplete&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;enableIDPProxy&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;idpProxyList&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;idpProxyCount&quot;&gt;
   &lt;Value&gt;0&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;useIntroductionForIDPProxy&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spSessionSyncEnabled&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;relayStateUrlList&quot;&gt;
  &lt;/Attribute&gt;
 &lt;/SPSSOConfig&gt;
 &lt;AttributeQueryConfig metaAlias=&quot;/attrQuery&quot;&gt;
  &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantNameIDEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;cotlist&quot;&gt;
   &lt;Value&gt;fedlet-cot&lt;/Value&gt;
  &lt;/Attribute&gt;
 &lt;/AttributeQueryConfig&gt;
 &lt;XACMLAuthzDecisionQueryConfig metaAlias=&quot;/pep&quot;&gt;
  &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthOn&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthUser&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthPassword&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantXACMLAuthzDecisionResponseSigned&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantAssertionEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;cotlist&quot;&gt;
   &lt;Value&gt;fedlet-cot&lt;/Value&gt;
  &lt;/Attribute&gt;
 &lt;/XACMLAuthzDecisionQueryConfig&gt;
&lt;/EntityConfig&gt;</programlisting>
   </step>

   <step>
    <para>In OpenAM console delete the original SP entity configuration for the
    Fedlet, and then import the updated metadata for the new configuration into
    OpenAM on the IDP side.</para>
   </step>

   <step>
    <para>Restart the Fedlet or the container in which it runs in order for
    the Fedlet to pick up the changes to the configuration properties and the
    metadata.</para>
   </step>
  </procedure>
 </section>

 <section xml:id="customize-java-fedlet">
  <title>Customizing a Java Fedlet</title>

  <para>You can customize the Java Fedlet to perform many of the SAML 2.0
  service provider operations. The Java Fedlet has the SAML 2.0 capabilities
  identified in the table in the <citetitle>Administration Guide</citetitle>,
  <link xlink:show="new" xlink:href="admin-guide#fedlet-saml2-features"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Fedlet Support for
  SAML 2.0 Features</citetitle></link>.</para>

  <procedure xml:id="hello-world-with-fedlet">
   <title>To Add Your Application</title>

   <variablelist>
    <para>The Fedlet includes the following files that you use when building
    your own service provider application based on the demo web application,
    including a set of JavaServer Pages (JSP) examples.</para>
    <varlistentry>
     <term><filename>conf/</filename></term>
     <listitem>
      <para>Configuration files copied to <filename>$HOME/fedlet</filename> when
      you first deploy and configure the Fedlet. When deploying your application,
      you can move these to an alternate location passed to the Java virtual
      machine for the web application container at startup. For example, if
      you store the configuration under <filename>/export/fedlet/</filename>,
      then you could pass the following property to the JVM.</para>
      <literallayout class="monospaced"
      >-Dcom.sun.identity.fedlet.home=/export/fedlet/conf</literallayout>
      <para>You do not need to include these files in your application.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>fedletAttrQuery.jsp</filename></term>
     <term><filename>fedletAttrResp.jsp</filename></term>
     <listitem>
      <para>Sample SAML attribute query and response handlers.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>fedletEncode.jsp</filename></term>
     <listitem>
      <para>Utility JSP to encode a password, such as the password used to
      protect a Java keystore</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>fedletSampleApp.jsp</filename></term>
     <term><filename>index.jsp</filename></term>
     <listitem>
      <para>Demo application. You can remove these before deployment to replace
      them with your application.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>fedletXACMLQuery.jsp</filename></term>
     <term><filename>fedletXACMLResp.jsp</filename></term>
     <listitem>
      <para>Sample SAML XACML query and response handlers.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>logout.jsp</filename></term>
     <listitem>
      <para>Utility page to perform single log out</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>saml2/jsp/</filename></term>
     <listitem>
      <para>JSPs to initiate single sign on and single logout, and to handle
      errors, and also a JSP for obtaining Fedlet metadata,
      <filename>saml2/jsp/exportmetadata.jsp</filename></para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>WEB-INF/classes/</filename></term>
     <listitem>
      <para>Localized Java properties files for strings used in the Fedlet user
      interface</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>WEB-INF/lib/</filename></term>
     <listitem>
      <para>Fedlet libraries required by your application</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>WEB-INF/web.xml</filename></term>
     <listitem>
      <para>Fedlet web application configuration, showing how JSPs map to URLs
      used in the Fedlet. Add mappings for your application before
      deployment.</para>
      <para>In the <filename>web.xml</filename> mappings, your application must
      be mapped to <literal>/fedletapplication</literal>, as this is the
      assertion consumer URL set in the Fedlet metadata.</para>
      <programlisting language="xml">&lt;servlet&gt;
    &lt;servlet-name&gt;yourApp&lt;/servlet-name&gt;
    &lt;jsp-file&gt;/fedletSampleApp.jsp&lt;/jsp-file&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;yourApp&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/fedletapplication&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</programlisting>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>Follow these steps for a very simple demonstration of how to customize
   the Fedlet.</para>
   <step>
    <para>Backup <filename>fedletSampleApp.jsp</filename>.</para>
    <screen>$ cd /path/to/tomcat/webapps/fedlet/
$ cp fedletSampleApp.jsp fedletSampleApp.jsp.orig</screen>
   </step>
   <step>
    <para>Edit <filename>fedletSampleApp.jsp</filename> to reduce it to a single
    redirection to <filename>myapp.jsp</filename>. An implementation of the
    &lt;html&gt; element of the file follows below.</para>
    <programlisting language="html">&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Fedlet Sample Application&lt;/title&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=iso-8859-1&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;%
    // BEGIN : following code is a must for Fedlet (SP) side application
    Map map;
    try {
        // invoke the Fedlet processing logic. this will do all the
        // necessary processing conforming to SAMLv2 specifications,
        // such as XML signature validation, Audience and Recipient
        // validation etc.
        map = SPACSUtils.processResponseForFedlet(request, response);
        response.sendRedirect(&quot;myapp.jsp&quot;);
    } catch (SAML2Exception sme) {
        SAMLUtils.sendError(request, response,
            response.SC_INTERNAL_SERVER_ERROR, &quot;failedToProcessSSOResponse&quot;,
            sme.getMessage());
        return;
    } catch (IOException ioe) {
        SAMLUtils.sendError(request, response,
            response.SC_INTERNAL_SERVER_ERROR, &quot;failedToProcessSSOResponse&quot;,
            ioe.getMessage());
        return;
    } catch (SessionException se) {
        SAMLUtils.sendError(request, response,
            response.SC_INTERNAL_SERVER_ERROR, &quot;failedToProcessSSOResponse&quot;,
            se.getMessage());
        return;
    } catch (ServletException se) {
        SAMLUtils.sendError(request, response,
            response.SC_BAD_REQUEST, &quot;failedToProcessSSOResponse&quot;,
            se.getMessage());
        return;
    }
    // END : code is a must for Fedlet (SP) side application
%&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
   </step>
   <step>
    <para>Add a <filename>myapp.jsp</filename> page to the Fedlet, such as the
    following.</para>
    <programlisting language="html">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;My Application&lt;/title&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;h1&gt;My Application&lt;/h1&gt;

&lt;p&gt;After you change the &lt;code&gt;fedletSampleApp.jsp&lt;/code&gt;,
   all it does is redirect to this home page after
   successful login.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</programlisting>
   </step>
   <step>
    <para>Browse to the Fedlet URL, such as
    <literal>http://openam.example.com:8080/fedlet/</literal>, and try one
    of the login methods.</para>
    <para>After login you are redirected to <filename>myapp.jsp</filename>.</para>
   </step>
  </procedure>

  <section xml:id="fedlet-perform-sso">
   <title>Performing Single Sign-On</title>

   <para>The Java Fedlet includes a JSP file,
   <filename>saml2/jsp/fedletSSOInit.jsp</filename>, that you can call to
   initiate single sign-on from the Fedlet (SP) side. The Fedlet home page,
   <filename>index.jsp</filename>, calls this page when the user does
   Fedlet-initiated single sign-on.</para>

   <para>When calling this JSP, the parameters to use are those also used by
   <filename>saml2/jsp/spSSOInit.jsp</filename> in OpenAM. Those parameters are
   described in the <citetitle>Administration Guide</citetitle> section,
   <link xlink:show="new" xlink:href="admin-guide#spssoinit-parameters"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle
   ><filename>spSSOInit.jsp</filename> Parameters</citetitle></link>.</para>

   <para>For IDP-initiated single sign-on, call the appropriate page on the
   Identity Provider. OpenAM's page is described in the
   <citetitle>Administration Guide</citetitle> section,
   <link xlink:show="new" xlink:href="admin-guide#idpssoinit-parameters"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle
   ><filename>idpSSOInit.jsp</filename> Parameters</citetitle></link>.</para>

   <para>After single sign-on, the user-agent is directed by default to the
   assertion consumer URI set in the Fedlet metadata, which by default is
   <literal>/fedletapplication</literal>. Also by default that URI points to
   the JSP, <filename>fedletSampleApp.jsp</filename></para>
  </section>

  <section xml:id="fedlet-perform-slo">
   <title>Performing Single Logout</title>

   <para>The Java Fedlet includes a JSP file,
   <filename>saml2/jsp/spSingleLogoutInit.jsp</filename>, that you can call to
   initiate single logout from the Fedlet (SP) side. The Fedlet assertion
   consumer page, <filename>fedletSampleApp.jsp</filename>, calls this when
   the user does Fedlet-initiated single logout.</para>

   <para>When calling this JSP, the parameters to use are those also used by
   <filename>saml2/jsp/spSingleLogoutInit.jsp</filename> in OpenAM. Those
   parameters are described in the <citetitle>Administration Guide</citetitle>
   section, <link xlink:show="new" xlink:href="admin-guide#spsloinit-parameters"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle
   ><filename>spSingleLogoutInit.jsp</filename> Parameters</citetitle></link>.</para>

   <para>For IDP-initiated single logout, call the appropriate page on the
   Identity Provider. OpenAM's page is described in the
   <citetitle>Administration Guide</citetitle> section,
   <link xlink:show="new" xlink:href="admin-guide#idpsloinit-parameters"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle
   ><filename>idpSingleLogoutInit.jsp</filename> Parameters</citetitle></link>.</para>

   <para>Set the <literal>RelayState</literal> parameter when initiating logout
   to redirect the user-agent appropriately when the process is complete.</para>
  </section>

  <section xml:id="fedlet-perform-attr-query">
   <title>Performing Attribute Queries</title>

   <para>As seen in the procedure, <xref linkend="try-fedlet-attribute-query" />,
   an attribute query allows the Fedlet to get profile information about a
   subject from the Attribute Authority. The Fedlet must be configured to deal
   with responses from the Attribute Authority, including configuration for
   signing and encryption. Also, an Identity Provider and Attribute Authority
   is likely to share only those attributes that the Fedlet absolutely requires
   to provide service, such as, for example, a name to customize a page. The
   attributes must then be mapped in the Attribute Authority and Fedlet
   metadata.</para>

   <para>The Java Fedlet includes a JSP file,
   <filename>fedletAttrQuery.jsp</filename>, which is used in the procedure
   described above to prepare an attribute query using the transient subject
   identifier obtained during single sign-on. The
   <filename>fedletAttrQuery.jsp</filename> also supports using the Subject
   name from an X.509 identity certificate.</para>

   <para>Another JSP file, <filename>fedletAttrResp.jsp</filename>, sends the
   query to the Attribute Authority using
   <literal>com.sun.identity.saml2.profile.AttributeQueryUtil.html.getAttributesForFedlet()</literal>,
   and if successful processes the result, which is a
   <literal>java.util.Map</literal> of the attribute types and their
   values.</para>
  </section>

  <section xml:id="fedlet-perform-xacml-query">
   <title>Performing XACML Queries</title>

   <para>As seen in the procedure, <xref linkend="try-fedlet-xacml-query" />,
   a XACML query allows the Fedlet to request a policy decision from a XACML
   PDP. You can configure OpenAM to respond to such queries as described in that
   procedure.</para>

   <para>The Java Fedlet includes a JSP file,
   <filename>fedletXACMLQuery.jsp</filename>, which is used in the procedure
   described above to prepare a XACML query, identifying a resource URL and a
   type of HTTP operation to perform, and specifying the subject identifier
   obtained during single sign-on.</para>

   <para>Another JSP file, <filename>fedletXACMLResp.jsp</filename>, sends the
   query to the XACML PDP using
   <literal>com.sun.identity.saml2.profile.XACMLQueryUtil.getPolicyDecisionForFedlet()</literal>,
   and if successful processes the result, which is a
   <literal>java.lang.String</literal> representing the decision, such as
   <literal>Permit</literal> if the decision is to allow access, or
   <literal>Deny</literal> if the decision is to deny access.</para>
  </section>
 </section>
</chapter>
