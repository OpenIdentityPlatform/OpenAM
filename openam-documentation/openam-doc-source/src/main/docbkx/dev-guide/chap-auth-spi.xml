<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2013 ForgeRock AS
  !    
-->
<chapter xml:id='chap-auth-spi'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Customizing Authentication Modules</title>
 <indexterm>
  <primary>Authentication</primary>
  <secondary>Custom module</secondary>
 </indexterm>

 <!--
      Based on Steve Ferris's work on the OpenAM wiki at
      https://wikis.forgerock.org/confluence/display/openam/Write+a+custom+authentication+module

      This version uses Maven to simplify the build process for developers.
 -->

 <para>This chapter shows how to customize authentication with a sample custom
 authentication module. For deployments with particular requirements not met by
 existing OpenAM authentication modules, determine whether you can adapt one of
 the built-in or extension modules for your needs. If not, build the
 functionality into a custom authentication module.</para>

 <section xml:id="about-custom-auth-module">
  <title>About the Sample Authentication Module</title>
  
  <para>The sample authentication module prompts for a user name and password
  to authenticate the user, and handles error conditions. The sample shows how
  you integrate an authentication module into OpenAM such that you can
  configure the module through OpenAM console, and also localize the user
  interface.</para>

  <variablelist>
   <!-- Perhaps this could be stored on a ForgeRock git server at some point. -->
   <para>The <link xlink:href="https://github.com/markcraig/openam-auth-sample"
   xlink:show="new">sample authentication module source</link> is available
   online. Get a local clone so that you can try the sample on your system.
   In the sources you find the following files.</para>

   <varlistentry>
    <term><filename>pom.xml</filename></term>
    <listitem>
     <para>Apache Maven project file for the module</para>

     <para>This file specifies how to build the sample authentication module,
     and also specifies its dependencies on OpenAM components and on the
     Java Servlet API.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>src/main/java/org/forgerock/openam/examples/SampleAuth.java</filename></term>
    <listitem>
     <para>Core class for the sample authentication module</para>

     <para>This class is called by OpenAM to initialize the module and to
     process authentication. See
     <xref linkend="authentication-logic-sample-auth-module" /> for details.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>src/main/java/org/forgerock/openam/examples/SampleAuthPrincipal.java</filename></term>
    <listitem>
     <para>Class implementing <literal>java.security.Principal</literal>
     interface that defines how to map credentials to identities</para>

     <para>This class is used to process authentication. See
     <xref linkend="principal-sample-auth-module" /> for details.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>src/main/resources/amAuthSampleAuth.properties</filename></term>
    <listitem>
     <para>Properties file mapping UI strings to property values</para>

     <para>This file makes it easier to localize the UI. See
     <xref linkend="properties-sample-auth-module" /> for details.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>src/main/resources/amAuthSampleAuth.xml</filename></term>
    <listitem>
     <para>Configuration file for the sample authentication service</para>

     <para>This file is used when registering the authentication module with
     OpenAM. See <xref linkend="service-conf-sample-auth-module"/> for details.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>src/main/resources/config/auth/default/SampleAuth.xml</filename></term>
    <listitem>
     <para>Callback file for OpenAM classic UI authentication pages</para>

     <para>The sample authentication module does not include localized versions
     of this file. See <xref linkend="callbacks-file-sample-auth-module"/> for
     details.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="properties-sample-auth-module">
  <title>Sample Auth Properties</title>
  
  <para>OpenAM uses a Java properties file per locale to retrieve the
  appropriate, localized strings for the authentication module.</para>
  
  <para>The following is the Sample Authentication Module properties file,
  <filename>amAuthSampleAuth.properties</filename>.</para>
  
  <programlisting language="java"
  >sampleauth-service-description=Sample Authentication Module
a500=Authentication Level
a501=Service Specific Attribute

sampleauth-ui-login-header=Login
sampleauth-ui-username-prompt=User Name:
sampleauth-ui-password-prompt=Password:

sampleauth-error-1=Error 1 occurred during the authentication
sampleauth-error-2=Error 2 occurred during the authentication</programlisting>
 </section>

 <section xml:id="callbacks-file-sample-auth-module">
  <title>Sample Auth Callbacks</title>
  
  <para>OpenAM callbacks XML files are used to build the classic UI to prompt
  the user for identity information needed to process the authentication.
  The document type for a callback XML file is described in
  <filename>WEB-INF/Auth_Module_Properties.dtd</filename> where OpenAM is
  deployed.</para>
  
  <example xml:id="full-callbacks-file">
   <title>Sample Auth Callbacks File</title>
   
   <para>The following is the <filename>SampleAuth.xml</filename> callbacks
   file.</para>
   
   <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE ModuleProperties PUBLIC
 "=//iPlanet//Authentication Module Properties XML Interface 1.0 DTD//EN"
        "jar://com/sun/identity/authentication/Auth_Module_Properties.dtd"&gt;

&lt;ModuleProperties moduleName="SampleAuth" version="1.0" &gt;
    &lt;Callbacks length="0" order="1" timeout="600" header="#NOT SHOWN#" /&gt;
    &lt;Callbacks length="2" order="2" timeout="600" header="#TO BE SUBSTITUTED#"&gt;
        &lt;NameCallback isRequired="true"&gt;
            &lt;Prompt&gt;#USERNAME#&lt;/Prompt&gt;
        &lt;/NameCallback&gt;
        &lt;PasswordCallback echoPassword="false" &gt;
            &lt;Prompt&gt;#PASSWORD#&lt;/Prompt&gt;
        &lt;/PasswordCallback&gt;
    &lt;/Callbacks&gt;
    &lt;Callbacks length="1" order="3" timeout="600" header="#TO BE SUBSTITUTED#"
        error="true" &gt;
        &lt;NameCallback&gt;
            &lt;Prompt&gt;#THE DUMMY WILL NEVER BE SHOWN#&lt;/Prompt&gt;
        &lt;/NameCallback&gt;
    &lt;/Callbacks&gt;
&lt;/ModuleProperties&gt;</programlisting>
   
   <orderedlist>
    <para>This file specifies three states.</para>
    <listitem>
     <para>The initial state (order="1") is used dynamically to replace the
     dummy strings shown between hashes (for example,
     <literal>#USERNAME#</literal>) by the
     <literal>substituteUIStrings()</literal> method in
     <filename>SampleAuth.java</filename>.</para>
    </listitem>
    <listitem>
     <para>The next state (order="2") handles prompting the user for
     authentication information.</para>
    </listitem>
    <listitem>
     <para>The last state (order="3") has the attribute
     <literal>error="true"</literal>. If the authentication module state
     machine reaches this order then the authentication has failed. The
     <literal>NameCallback</literal> is not used and not displayed to user.
     OpenAM requires that the callbacks array have at least one element.
     Otherwise OpenAM does not permit header substitution.</para>
    </listitem>
   </orderedlist>
  </example>
 </section>

 <section xml:id="authentication-logic-sample-auth-module">
  <title>The Sample Authentication Logic</title>
  
  <para>An OpenAM authentication module must extend the
  <literal>com.sun.identity.authentication.spi.AMLoginModule</literal> abstract
  class, and must implement the methods shown below.</para>
  
  <para>See the <link xlink:href="${javadocBase}" xlink:show="new"
  ><citetitle>OpenAM Java SDK API Specification</citetitle></link> for
  reference.</para>
  
  <programlisting language="java">
// OpenAM calls the init() method once when the module is created.
public void init(Subject subject, Map sharedState, Map options)

// OpenAM calls the process() method when the user submits authentication
// information. The process() method determines what happens next:
// success, failure, or the next state specified by the order
// attribute in the callbacks XML file.
public int process(Callback[] callbacks, int state) throws LoginException

// OpenAM expects the getPrincipal() method to return an implementation of
// the java.security.Principal interface.
public Principal getPrincipal()</programlisting>
  
  <para>OpenAM does not reuse authentication module instances. This means that
  you can store information specific to the authentication process in the
  instance.</para>
  
  <para>The implementation, <filename>SampleAuth.java</filename>, is shown
  below.</para>

  <!--
       Using JCite would be nice here. At present the source is copy/pasted.
  -->
  <informalexample><?dbfo pgwide="1"?><?dbfo keep-together="auto"?>
   <programlisting language="java">/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2011-2013 ForgeRock AS. All Rights Reserved
 *
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at
 * http://forgerock.org/license/CDDLv1.0.html
 * See the License for the specific language governing
 * permission and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * Header Notice in each file and include the License file
 * at http://forgerock.org/license/CDDLv1.0.html
 * If applicable, add the following below the CDDL Header,
 * with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 */

package org.forgerock.openam.examples;

import java.security.Principal;
import java.util.Map;
import java.util.ResourceBundle;

import javax.security.auth.Subject;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.login.LoginException;

import com.sun.identity.authentication.spi.AMLoginModule;
import com.sun.identity.authentication.spi.AuthLoginException;
import com.sun.identity.authentication.spi.InvalidPasswordException;
import com.sun.identity.authentication.util.ISAuthConstants;
import com.sun.identity.shared.datastruct.CollectionHelper;
import com.sun.identity.shared.debug.Debug;



public class SampleAuth extends AMLoginModule
{

    // Name for the debug-log
    private final static String DEBUG_NAME = "SampleAuth";

    // Name of the resource bundle
    private final static String amAuthSampleAuth = "amAuthSampleAuth";

    // User names for authentication logic
    private final static String USERNAME = "demo";
    private final static String ERROR_1_NAME = "test1";
    private final static String ERROR_2_NAME = "test2";

    // Orders defined in the callbacks file
    private final static int STATE_BEGIN = 1;
    private final static int STATE_AUTH = 2;
    private final static int STATE_ERROR = 3;

    private final static Debug debug = Debug.getInstance(DEBUG_NAME);

    private Map options;
    private ResourceBundle bundle;



    public SampleAuth()
    {
        super();
    }



    @Override
    // This method stores service attributes and localized properties
    // for later use.
    public void init(Subject subject, Map sharedState, Map options)
    {
        if (debug.messageEnabled())
        {
            debug.message("SampleAuth::init");
        }
        this.options = options;
        bundle = amCache.getResBundle(amAuthSampleAuth, getLoginLocale());
    }



    @Override
    public int process(Callback[] callbacks, int state) throws LoginException
    {

        if (debug.messageEnabled())
        {
            debug.message("SampleAuth::process state: " + state);
        }

        switch (state)
        {

            case STATE_BEGIN:
                // No time wasted here - simply modify the UI and
                // proceed to next state
                substituteUIStrings();
                return STATE_AUTH;

            case STATE_AUTH:
                // Get data from callbacks. Refer to callbacks XML file.
                NameCallback nc = (NameCallback) callbacks[0];
                PasswordCallback pc = (PasswordCallback) callbacks[1];
                String username = nc.getName();
                String password = new String(pc.getPassword());

                // First errorstring is stored in "sampleauth-error-1" property.
                if (username.equals(ERROR_1_NAME))
                {
                    setErrorText("sampleauth-error-1");
                    return STATE_ERROR;
                }

                // Second errorstring is stored in "sampleauth-error-2" property.
                if (username.equals(ERROR_2_NAME))
                {
                    setErrorText("sampleauth-error-2");
                    return STATE_ERROR;
                }

                if (username.equals(USERNAME) &amp;&amp; password.equals("changeit"))
                {
                    return ISAuthConstants.LOGIN_SUCCEED;
                }

                throw new InvalidPasswordException("password is wrong", USERNAME);

            case STATE_ERROR:
                return STATE_ERROR;
            default:
                throw new AuthLoginException("invalid state");

        }
    }



    @Override
    public Principal getPrincipal()
    {
        return new SampleAuthPrincipal(USERNAME);
    }



    private void setErrorText(String err) throws AuthLoginException
    {
        // Receive correct string from properties and substitute the
        // header in callbacks order 3.
        substituteHeader(STATE_ERROR, bundle.getString(err));
    }



    private void substituteUIStrings() throws AuthLoginException
    {
        // Get service specific attribute configured in OpenAM
        String ssa = CollectionHelper.getMapAttr(options,
                "sampleauth-service-specific-attribute");

        // Get property from bundle
        String new_hdr = ssa + " "
                + bundle.getString("sampleauth-ui-login-header");
        substituteHeader(STATE_AUTH, new_hdr);

        Callback[] cbs_phone = getCallback(STATE_AUTH);

        replaceCallback(STATE_AUTH, 0, new NameCallback(bundle
                .getString("sampleauth-ui-username-prompt")));

        replaceCallback(STATE_AUTH, 1, new PasswordCallback(bundle
                .getString("sampleauth-ui-password-prompt"), false));
    }

}
</programlisting>
  </informalexample>
 </section>

 <section xml:id="principal-sample-auth-module">
  <title>The Sample Auth Principal</title>
  
  <para>The implementation, <filename>SampleAuthPrincipal.java</filename>, is
  shown below.</para>

  <!--
       Using JCite would be nice here. At present the source is copy/pasted.
  -->
  <informalexample><?dbfo pgwide="1"?><?dbfo keep-together="auto"?>
   <programlisting language="java">/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2011-2013 ForgeRock AS. All Rights Reserved
 *
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at
 * http://forgerock.org/license/CDDLv1.0.html
 * See the License for the specific language governing
 * permission and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * Header Notice in each file and include the License file
 * at http://forgerock.org/license/CDDLv1.0.html
 * If applicable, add the following below the CDDL Header,
 * with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 */

package org.forgerock.openam.examples;



import java.io.Serializable;
import java.security.Principal;



public class SampleAuthPrincipal implements Principal, Serializable
{
    private final String name;
    private final static String CLASSNAME = "SampleAuthPrincipal";
    private final static String COLON = " : ";



    public SampleAuthPrincipal(String name)
    {
        if (name == null)
        {
            throw new NullPointerException("illegal null input");
        }

        this.name = name;
    }



    /**
     * Return the LDAP username for this &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;.
     *
     * @return the LDAP username for this &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;
     */
    @Override
    public String getName()
    {
        return name;
    }



    /**
     * Return a string representation of this &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;.
     *
     * @return a string representation of this
     *         &lt;code&gt;TestAuthModulePrincipal&lt;/code&gt;.
     */
    @Override
    public String toString()
    {
        return new StringBuilder().append(CLASSNAME).append(COLON)
                .append(name).toString();
    }



    /**
     * Compares the specified Object with this &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;
     * for equality. Returns true if the given object is also a
     * &lt;code&gt; SampleAuthPrincipal &lt;/code&gt; and the two SampleAuthPrincipal have
     * the same username.
     *
     * @param o Object to be compared for equality with this
     *          &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;.
     * @return true if the specified Object is equal equal to this
     *         &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;.
     */
    @Override
    public boolean equals(Object o)
    {
        if (o == null)
        {
            return false;
        }

        if (this == o)
        {
            return true;
        }

        if (!(o instanceof SampleAuthPrincipal))
        {
            return false;
        }
        SampleAuthPrincipal that = (SampleAuthPrincipal) o;

        if (this.getName().equals(that.getName()))
        {
            return true;
        }
        return false;
    }



    /**
     * Return a hash code for this &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;.
     *
     * @return a hash code for this &lt;code&gt; SampleAuthPrincipal &lt;/code&gt;.
     */
    @Override
    public int hashCode()
    {
        return name.hashCode();
    }
}
</programlisting>
  </informalexample>
 </section>

 <section xml:id="service-conf-sample-auth-module">
  <title>The Sample Auth Service Configuration</title>
  
  <para>OpenAM requires that all authentication modules be configured by means
  of an OpenAM service. At minimum, the service must include an authentication
  level attribute. Your module can access these configuration attributes in
  the <literal>options</literal> parameter passed to the
  <literal>init()</literal> method.</para>
  
  <itemizedlist>
   <para>Some observations about the service configuration file follow in the
   list below.</para>
   <listitem>
    <para>The document type for a service configuration file is described in
    <filename>WEB-INF/sms.dtd</filename> where OpenAM is deployed.</para>
   </listitem>
   <listitem>
    <para>The service name is taken from the module name:
    <literal>iPlanetAMAuth<replaceable>module-name</replaceable>Service</literal>.
    In this case, the service name is
    <literal>iPlanetAMAuthSampleAuthService</literal>.</para>
   </listitem>
   <listitem>
    <para>The service must have a localized description, retrieved from a
    properties file.</para>
   </listitem>
   <listitem>
    <para>The <literal>i18nFileName</literal> attribute in the service
    configuration holds the default (non-localized) base name of the Java
    properties file. The <literal>i18nKey</literal> attributes indicate
    properties keys to string values in the Java properties file.</para>
   </listitem>
   <listitem>
    <para>The authentication level attribute name is taken from the module name:
    <literal>iplanet-am-auth-<replaceable>module-name</replaceable>-auth-level</literal>,
    where the <replaceable>module-name</replaceable> is all lower case. Here,
    the authentication level attribute is named
    <literal>iplanet-am-auth-sampleauth-auth-level</literal>.</para>
   </listitem>
   <listitem>
    <para>The Sample Auth service configuration includes an example
    <literal>sampleauth-service-specific-attribute</literal>, which can be
    configured through OpenAM console.</para>
   </listitem>
  </itemizedlist>
  
  <para>The service configuration file,
  <filename>amAuthSampleAuth.xml</filename>, is shown below.</para>
  
  <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

   Copyright (c) 2011 ForgeRock AS. All Rights Reserved

   The contents of this file are subject to the terms
   of the Common Development and Distribution License
   (the License). You may not use this file except in
   compliance with the License.

   You can obtain a copy of the License at
   http://forgerock.org/license/CDDLv1.0.html
   See the License for the specific language governing
   permission and limitations under the License.

   When distributing Covered Code, include this CDDL
   Header Notice in each file and include the License file
   at http://forgerock.org/license/CDDLv1.0.html
   If applicable, add the following below the CDDL Header,
   with the fields enclosed by brackets [] replaced by
   your own identifying information:
   "Portions Copyrighted [year] [name of copyright owner]"
--&gt;
&lt;!DOCTYPE ServicesConfiguration
    PUBLIC "=//iPlanet//Service Management Services (SMS) 1.0 DTD//EN"
    "jar://com/sun/identity/sm/sms.dtd"&gt;

&lt;ServicesConfiguration&gt;
 &lt;Service name="iPlanetAMAuthSampleAuthService" version="1.0"&gt;
  &lt;Schema
   serviceHierarchy="/DSAMEConfig/authentication/iPlanetAMAuthSampleAuthService"
   i18nFileName="amAuthSampleAuth" revisionNumber="10"
   i18nKey="sampleauth-service-description"&gt;
   &lt;Organization&gt;
    &lt;AttributeSchema name="iplanet-am-auth-sampleauth-auth-level"
     type="single" syntax="number_range" rangeStart="0" rangeEnd="2147483647"
     i18nKey="a500"&gt;
     &lt;DefaultValues&gt;
      &lt;Value&gt;1&lt;/Value&gt;
     &lt;/DefaultValues&gt;
    &lt;/AttributeSchema&gt;

    &lt;AttributeSchema name="sampleauth-service-specific-attribute"
     type="single" syntax="string" validator="no" i18nKey="a501"&gt;
     &lt;DefaultValues&gt;
      &lt;Value&gt;&lt;/Value&gt;
     &lt;/DefaultValues&gt;
    &lt;/AttributeSchema&gt;

    &lt;SubSchema name="serverconfig" inheritance="multiple"&gt;
     &lt;AttributeSchema name="iplanet-am-auth-sampleauth-auth-level"
      type="single" syntax="number_range" rangeStart="0" rangeEnd="2147483647"
      i18nKey="a500"&gt;
      &lt;DefaultValues&gt;
       &lt;Value&gt;1&lt;/Value&gt;
      &lt;/DefaultValues&gt;
     &lt;/AttributeSchema&gt;

     &lt;AttributeSchema name="sampleauth-service-specific-attribute"
      type="single" syntax="string" validator="no" i18nKey="a501"&gt;
      &lt;DefaultValues&gt;
       &lt;Value&gt;&lt;/Value&gt;
      &lt;/DefaultValues&gt;
     &lt;/AttributeSchema&gt;

    &lt;/SubSchema&gt;
   &lt;/Organization&gt;
  &lt;/Schema&gt;
 &lt;/Service&gt;
&lt;/ServicesConfiguration&gt;</programlisting>
 </section>

 <section xml:id="build-config-sample-auth-module">
  <title>Building &amp; Installing the Sample Auth Module</title>
  
  <para>Build the module with Apache Maven, and install the module in
  OpenAM.</para>
  
  <section xml:id="building-sample-auth-module">
   <title>Building the Module</title>

   <para>Build the module using Apache Maven.</para>

   <screen>$ cd /path/to/openam-auth-sample
$ mvn install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building openam-auth-sample 1.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...

[INFO]
[INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ openam-auth-sample ---
[INFO] Building jar: ...target/openam-auth-sample-1.0.0-SNAPSHOT.jar
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.651s
[INFO] Finished at: Thu Oct 03 11:19:07 CEST 2013
[INFO] Final Memory: 20M/226M
[INFO] ------------------------------------------------------------------------</screen>

   <para>After you successfully build the module, you find the .jar in
   the <filename>target/</filename> directory of the project.</para>
  </section>
  
  <section xml:id="installing-sample-auth-module">
   <title>Installing the Module</title>
   
   <para>Installing the sample authentication module consists of copying the
   .jar to OpenAM's <filename>WEB-INF/lib/</filename> directory, registering
   the module with OpenAM, and then restarting OpenAM or the web application
   container where it runs.</para>

   <orderedlist>
    <listitem>
     <para>Copy the sample authentication module .jar file to
     <filename>WEB-INF/lib/</filename> where OpenAM is deployed.</para>

     <screen>$ cp target/openam-auth-sample*.jar /path/to/tomcat/webapps/openam/WEB-INF/lib/</screen>
    </listitem>

    <listitem>
     <para>Register the module with OpenAM using the <command>ssoadm</command>
     command.</para>

     <screen>$ ssoadm
 create-svc
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --xmlfile amAuthSampleAuth.xml

Service was added.
$ ssoadm
 register-auth-module
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --authmodule org.forgerock.openam.examples.SampleAuth

Authentication module was registered.</screen>

     <para>See the <link xlink:href="reference#ssoadm-1" xlink:show="new"
     xlink:role="http://docbook.org/xlink/role/olink"><command>ssoadm</command>
     reference</link> a full list of Authentication Service Management
     subcommands.</para>
    </listitem>

    <listitem>
     <para>Restart OpenAM or the container in which it runs.</para>

     <para>For example if you deployed OpenAM in Apache Tomcat, then you shut
     down Tomcat and start it again.</para>

     <screen>$ /path/to/tomcat/bin/shutdown.sh
$ /path/to/tomcat/bin/startup.sh
$ tail -1 /path/to/tomcat/logs/catalina.out
INFO: Server startup in 14736 ms</screen>
    </listitem>
   </orderedlist>
  </section>
 </section>

 <section xml:id="configuring-testing-sample-auth-module">
  <title>Configuring &amp; Testing the Sample Auth Module</title>
  
  <para>Authentication modules are registered as services with OpenAM globally,
  and then set up for use in a particular realm. In this example, you set up
  the sample authentication module for use in the realm / (Top Level Realm).</para>

  <para>Login to OpenAM Console as OpenAM administrator,
  <literal>amadmin</literal>, and browse to Access Control
  &gt; / (Top Level Realm) &gt; Authentication &gt; Module Instances.
  Then click New, and create an instance of the Sample Authentication Module.
  Name the module <literal>Sample</literal>.</para>
  
  <mediaobject xml:id="figure-register-sample-auth">
   <alt>Sample authentication module registration</alt>
   <imageobject>
    <imagedata fileref="images/register-sample-auth.png" format="PNG"/>
   </imageobject>
   <textobject>
    <para>The module type is Sample Authentication Module.</para>
   </textobject>
  </mediaobject>

  <para>After creating the module, click the name in the Module Instances
  list, and configure as appropriate.</para>
  
  <mediaobject xml:id="figure-sampleauth-conf">
   <alt>Sample authentication module configuration</alt>
   <imageobject>
    <imagedata fileref="images/sampleauth-conf.png" format="PNG"/>
   </imageobject>
   <textobject>
    <para>The module has two configurable properties, Authentication Level and
    Service Specific Attribute.</para>
   </textobject>
  </mediaobject>
  
  <para>Now that the module is configured, logout of OpenAM console.</para>

  <para>Finally, try the module by specifying the <literal>Sample</literal>
  module using a query string parameter. Browse to the login URL such as
  <literal>http://openam.example.com:8080/openam/UI/Login?module=Sample</literal>,
  and then authenticate with user name <literal>demo</literal> and password
  <literal>changeit</literal>.</para>

  <mediaobject xml:id="figure-openam-auth-sample-login">
   <alt>Sample authentication module login page</alt>
   <imageobject>
    <imagedata fileref="images/openam-auth-sample-login.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>On the login page, you can see the string you set as the value of
    Service Specific Attribute.</para>
   </textobject>
  </mediaobject>

  <para>After authentication you are redirected to the end user page for
  the demo user. You can logout of OpenAM console, and then try the
  authentication as users <literal>test1</literal> or <literal>test2</literal>
  to see what the error handling looks like to the user.</para>
 </section>
</chapter>
